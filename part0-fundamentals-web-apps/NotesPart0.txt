PART 0 - FUNDAMENTALS WEB APPS
(https://fullstackopen.com/en/part0)
==================================================
In this part, we will familiarize ourselves with the practicialities of taking the course. After that we will have an overview of the basics of web development, and also talk about the advances in web application development during the last few decades.

A. GENERAL INFO
This course is an introduction to modern web development with JavaScript. The main focus is on single page applications implemented with React and supporting them with RESTful and GraphQL web services implemented with Node.js. The course also has parts on TypeScript, React Native and Continuous integration. Other topics include debugging applications, configuration, managing runtime environments and NoSQL databases.
--
#Prerequisites
Participants are expected to have good programming skills, basic knowledge of web programming and databases, and have mastery of the Git version management system. You are also expected to have perseverance and a capacity for solving problems and seeking information independently. Previous knowledge of JavaScript or other course topics is not required.
--
#Course Material
The course material is meant to be read one part at a time and in order. The material contains exercises, which are placed so that the preceding material provides enough information for solving each exercise. You can do the exercises as you encounter them in the material, but it can also be beneficial to read all of the material in the part before starting with the exercises. In many parts of the course, the exercises build one larger application one small piece at a time. Some of the exercise applications are developed through multiple parts. The course material is based on incrementally expanding example applications, which change from part to part. It's best to follow the code along while making small modifications independently. The code of the example applications for each step of each part can be found on GitHub.
--
#Taking the Course
The course contains eleven parts, the first of which is numbered 0 for consistency with past iterations. One part corresponds loosely to one week (averaging 15-20 hours) of studying, but the speed of completing the course is flexible. Proceeding from part n to part n+1 is not sensible before enough know-how of the topics in part n has been achieved. In pedagogic terms, the course uses Mastery Learning, and you are only intended to proceed to the next part after doing enough of the exercises of the previous part. You are expected to do at least all of the exercises that are not marked with an asterisk(*). Exercises marked with an asterisk count towards your final grade, but skipping them does not prevent you from doing the compulsory exercises in the next part. The speed of completing the course is flexible, and exercises can be submitted until 23:59 EET on 1 March 2022. However, note that the deadline for taking exam for University of Helsinki credits is 10.1.2022. Exercise completion time statistics can be found via the submission system.
--
#Parts and Completion
Exercise completion time statistics can be found via the submission system. -Parts 0-5 (core course) - Full Stack Web Development (5 cr, AYCSM141081en)
The number of credits and the grade for the course are based on the total number of submitted exercises for parts 0-7 (including exercises marked with an asterisk).
Credits and grades are calculated as follows:
exercises	credits	grade
138	7	5
127	6	5
116	5	5
105	5	4
94	5	3
83	5	2
72	5	1
If you wish to receive university credits, you must complete an exam. The exam does not count towards your final grade, but you must pass it. You do the exam in the Moodle learning environment, which can be accessed via the Open University course page once you have signed up for the exam. A Finnish social security number is required. Once you have completed enough exercises for a passing grade, you can download the course certificate from the submission system. A Finnish social security number is not required. The last possible date for taking the exam is 10 January 2022. Note that you must sign up for the exam by 9 January 2022, at the latest. You can only take the exam after submitting enough exercises for five credits. It is not wise in practice to take the exam immediately after submitting the critical number of exercises. The exam is the same for 5-12 credits and does not count towards your grade. You do not need to attend the course exam or register to the Open University course in order to obtain the course certificate.
-Part 6 - Full Stack Web Development, extension 1 (1 cr, AYCSM141082en)
By submitting at least 127 of the exercises for parts 0-7 while working on the core course, you can receive an additional credit through this extension.
>Submit at least 127 exercises for parts 0-7.
>Enroll in part 6 through the Open University.
>Request credits for part 6.
-Part 7 - Full Stack Web Development, extension 2 (1 cr, AYCSM141083en)
By submitting at least 138 of the exercises for parts 0-7 while working on the core course, you can receive an additional credit through this extension.
>Submit at least 138 exercises for parts 0-7.
>Enroll in part 7 through the Open University.
>Request credits for part 7.
-Part 8 - Full Stack Web Development: GraphQL (1 cr, AYCSM14113)
By submitting at least 22/26 of the exercises for part 8 of the course, GraphQL, you can get one additional credit. Part 8 can be done any time after part 5, because its contents are independent from parts 6 and 7.
>Submit at least 22/26 exercises for part 8.
>Enroll in part 8 through the Open University.
>Request credits for part 8.
-Part 9 - Full Stack Web Development: TypeScript (1 cr, AYCSM14110)
By submitting at least 24/27 of the exercises for part 9 of the course, TypeScript, you can get one additional credit. It is recommended that you complete parts 0-7 before taking part 9.
>Submit at least 24/27 exercises for part 9.
>Enroll in part 9 through the Open University.
>Request credits for part 9.
-Part 10 - Full Stack Web Development: React Native (2 cr, AYCSM14111)
By submitting 25 exercises for part 10 of the course on React Native, you can earn two additional credits. More information about this part's prerequisites, exercise submission, and credits can be found inpart 10.
>Submit at least 25 exercises for part 10.
>Enroll in part 10 through the Open University.
>Request credits for part 10.
-Part 11 - Full Stack Web Development: Continuous Integration / Continuous Delivery (1 cr, AYCSM14112)
By submitting all exercises for part 11 of the course on Continuous Integration/Delivery, you can earn one additional credit. More information about this part's prerequisites and exercise submission can be found in part 11.
>Submit all exercises for part 11.
>Enroll in part 11 through the Open University.
>Request credits for part 11.
--
#How to get your credits
Note that in order to receive university credits, you need a Finnish social security number. If you want to receive credits, save your University of Helsinki student number to the exercise submission system
[GAMBAR: https://fullstackopen.com/static/c932af5dbda3a8de6e4e59ad830fe4f2/5a190/28b.png]
If you are not a student at the University of Helsinki, you can get a student number by registering for the course through Open University. You will receive your credits after you have submitted enough exercise for a passing grade, passed the exam and let us know through the exercise submission system that you have completed the course:
[GAMBAR: https://fullstackopen.com/static/1b9fc5af56ea92d38ded5516c8ccb894/5a190/28a.png]
You can view your grade in Weboodi approximately four weeks after notifying us. Please note that in order to get university credits you need a registration for each completed part, please see more info about registration.
--
#Course certificate
Even if you do not register to Open University for the exam, you can still download the course certificate from the submission system once you have completed enough exercises for a passing grade. For getting the certificate, a Finnish social security number is not needed.
--
#Expanding on a previously completed course
You can just pick up where you left off! If you wish to resubmit a whole part, please contact the course personnel via email or Telegram @mluukkai, with your GitHub username and which parts you would like to have deleted from your submissions.
#Expanding on other instances of this course
You can substitute parts of this course with parts you have previously submitted. For example, if you have previously completed the three credit course, you can substitute parts 0-3 of this course with the parts you have previously completed. You can only substitute parts in sequence, so you cannot substitute, for example, parts 0 and 2 but not complete part 1. You can only substitute whole parts. For example, if you have previously submitted 50% of exercises in a part, you cannot substitute those exercises - you would need to start over on that part of the course. "Credit transfer" of previously completed parts happens in the my submissions tab of the submission system. If you have previously passed the course exam (excluding the exam for the three credit course), and are now expanding your course, you do not have to do the exam again.
#Submitting exercises
The exercises are submitted through GitHub and marking them as done on the submission system. If you are submitting exercises from different parts to the same repository, use an appropriate system for naming your directories. You can of course create a new repository for each part. If you are using a private repository, add mluukkai as a collaborator. Exercises are submitted one part at a time. Once you have submitted exercises for a part, you can no longer submit any more exercises for that part. A system for detecting plagiarism is used to check exercises submitted to GitHub. If code is found from model answers or multiple students hand in the same code, the situation is handled according to the policy on plagiarism of the University of Helsinki. Many of the exercises build a larger application bit by bit. In these cases, submitting only the completed application is enough. You can make a commit after each exercise, but that is not compulsory.
#Sign up for the exam
For official university credits you need to pass the course exam that is done in Open University Moodle. Note that it is only possible to register for the exam if you have a Finnish social security number or you are able to register for the course in Helsinki in person!
Follow the instructions below to gain access to the course Moodle space:
-->Enroll in the course through Open University by 9 Jan 2022
-->You will receive the Moodle-link and the course key through email within 24 hours after course registration.
-->User ID. Do you study at University of Helsinki or other HAKA member institution?
If yes, use your username and password to log in to Moodle.
If no, please activate your University of Helsinki user ID to access Moodle. -->You will receive more information on the user ID after registration through email.
-->Sign into the Moodle space with your University of Helsinki / HAKA user ID and the enrollment key.
-->After course enrollment, save your University of Helsinki student ID number to the my submissions tab in the submission system.
-->If you used your institution’s HAKA identification to log in to Moodle, please send a message to avoin-student@helsinki.fi and ask for your University of Helsinki student ID.
Send the message from the same email address you used for course enrollment.
Include your full name, date of birth, name of the course in the email.
Please note!
-> You only need the Moodle access for the exam, not for accessing the course certificate.
-> Credits for the course are only available to students who have successfully registered for the course through the Open University and completed the course according to the instructions.
Electronic enrollment is available if you meet one of the following criteria:
-> You have a Finnish personal identity number (format: xxxxxxxx-xxxx) or an online banking ID.
-> You are a student at the University of Helsinki.
-> You are a student at another HAKA member institution.
After course enrollment: Note that you also have to save your student ID number to the my submissions tab in the submission system. If you used your institution’s HAKA identification to log in to Moodle, please send a message to avoin-student@helsinki.fi and ask for your University of Helsinki student ID. Include your full name, email address used for enrollment, date of birth, and the name of the course in the email.
--
#Full stack project
A full stack project worth 5, 7 or 10 credits will be available through Open University. For the project, an application is implemented in React and/or Node, though implementing a mobile application in React Native is also possible. The number of credits is based on hours of work done. One credit is approximately 17.5 hours of work. The work is graded pass/fail. It is possible to complete the project as a pair or a group. See more information on the project.
--
#Interview Promise
Our collaborators, Houston Inc., Terveystalo and Smartly.io, have given the promise of a job interview for everyone who completes the course and the project work with maximum credits (12 + 10). This means that the student can, if they so choose, sign up for a job interview with a collaborator who has given the promise. The teacher of the course, Matti Luukkainen, will send instructions to the student after the courses have been completed with maximum credits. You need to be a resident of Finland in order to participate in these interviews.
--
#Before you start
Using the Chrome browser is recommended for this course, because it provides the best tools for web development. Another alternative is the Developer Edition of Firefox, which provides the same range of features. The course exercises are submitted to GitHub, so Git must be installed and you should know how to use it. For instructions, see Git and GitHub tutorial for beginners. Install some sensible text editor that supports web development. Visual Studio Code is highly recommended.
Don't code with nano, Notepad or Gedit. NetBeans isn't very good for web development either. It is also rather heavy in comparison to Visual Studio Code. Also install Node.js. The material has been done with version 14.8.0, so don't install anything older than that. See Node.js installation instructions. Node package manager npm will be automatically installed with Node.js. We will be actively using npm throughout the course. Node also comes with npx, which we'll need a few times.
--
#Typos in the material
If you find a typo in the material, or something has been expressed unclearly, or is simply bad grammar, do a pull request to the course material in the repository. For example, the markdown source code of this page can be found in the repository at https://github.com/fullstack-hy2020/fullstack-hy2020.github.io/edit/source/src/content/0/en/part0a.md
At the bottom of each part of the material is a link to propose changes to material. You can edit the source code of the page by clicking on the link.	


=======================================================================
B. FUNDAMENTALS OF WEB APPS
Before we start programming, we will go through some principles of web development by examining an example application at https://studies.cs.helsinki.fi/exampleapp. The application exists only to demonstrate some basic concepts of the course, and are by no means examples of how web applications should be made. On the contrary, they demonstrate some old techniques of web development, which can even be seen as bad practice nowadays. Coding in the recommended style begins in part 1. Open the example application on your browser. Sometimes this takes a while. The 1st rule of web development: Always keep the Developer Console open on your web browser. On macOS, open the console by pressing F12or option-cmd-isimultaneously. On Windows or Linux, open the console by pressing F12or ctrl-shift-isimultaneously. The console can also be opened via the context menu. Remember to always keep the Developer Console open when developing web applications. The console looks like this:
[GAMBAR: https://fullstackopen.com/static/aaaefdadeccea5768728b3cdd41fd8f2/5a190/1e.png]
Make sure that the Network tab is open, and check the Disable cache option as shown. Preserve log can also be useful: it saves the logs printed by the application when the page is reloaded. NB: The most important tab is the Console. However, in the introduction we will be using the Network tab quite a bit.
--
#HTTP GET
The server and the web browser communicate with eacth othe using teh HTTP protocol. The Network tab shows how the browser and server communicate. When you reload the page (press the F5 key or the refresh symbol on your browser),  the console shows that two events have happened:
--> The browser fetches the contents of the page studies.cs.helsinki.fi/exampleapp from the server
--> And downloads the image kuva.png
[GAMBAR: https://fullstackopen.com/static/af6f88822db737cac2ea80d9343756fc/5a190/2e.png]
On a small screen you might have to widen the console window to see these. Clicking the first event reveals more information on what's happening:
[GAMBAR: https://fullstackopen.com/static/ddcd5afaeabfc1b0e8a4325bfeff90ee/5a190/3e.png]
The upper part, General, shows that the browser made a request to the address https://studies.cs.helsinki.fi/exampleapp (though the address has changed slightly since this picture was taken) using the GET method, and that the request was successful, because the server response had the Status code 200. The request and the server response have several headers:
[GAMBAR: https://fullstackopen.com/static/5e6569d4ad80edce4a03a25358b8f195/5a190/4e.png]
The Response headers on top tell us e.g. the size of the response in bytes, and the exact time of the response. An important header Content-Type tells us that the response is a text file in utf-8 format, contents of which have been formated with HTML. This way the browser knows the response to be a regular HTM-page, and to render it to the browser 'like a web page'. The Response tab shows the response data, a regular HTML-page. The body section determines the structure of the page rendered to the screen:
[GAMBAR: https://fullstackopen.com/static/4e49815c455c943b6eb14fe8cc0cefb3/5a190/5e.png]
The page contains a div element, which in turn contains a heading, a link to the page notes, and an img tag, and displays the number of notes created. Because of the img tag, the browser does a second HTTP-request to fetch the image kuva.png from the server. The details of the request are as follows:
[GAMBAR: https://fullstackopen.com/static/f053fa9082a1ad72066fa193346d0378/5a190/6e.png]
The request was made to the address https://studies.cs.helsinki.fi/exampleapp/kuva.png and its type is HTTP GET. The response headers tell us that the response size is 89350 bytes, and its Content-type is image/png, so it is a png image. The browser uses this information to render the image correctly to the screen. The chain of events caused by opening the page https://studies.cs.helsinki.fi/exampleapp on a browser form the following sequence diagram:
[GAMBAR: https://fullstackopen.com/static/972354fefd202e82e2c4a64d4d7c6125/5a190/7e.png]
First, the browser does an HTTP GET request to the server to fetch the HTML code of the page. The img tag in the HTML prompts the browser to fetch the image kuva.png. The browser renders the HTML page and the image to the screen. Even though it is difficult to notive, the HTML page begins to render before the image has been fetched the server.
--
#Traditional web Applications
The homepage of the example application works like a traditional web application. When entering the page, the browser fetches the HTML document detailing the structure and the textual content of the page from the server. The server has informed this document somhow. THe document can be static text file saved into the server's directory. The server can also form the HTML documents dynamically according to the application code, using, for example, data from a database. The HTML code of the example application has been formed dynamically, because it contains information on the number of created notes. he HTML code of the homepage is as follows:
[const getFrontPageHtml = (noteCount) => {
  return(`
    <!DOCTYPE html>
    <html>
      <head>
      </head>
      <body>
        <div class='container'>
          <h1>Full stack example app</h1>
          <p>number of notes created ${noteCount}</p>
          <a href='/notes'>notes</a>
          <img src='kuva.png' width='200' />
        </div>
      </body>
    </html>
`)
} 

app.get('/', (req, res) => {
  const page = getFrontPageHtml(notes.length)
  res.send(page)
})]
You don't have to understand the code just yet. The content of the HTML page has been saved as a template string, or a string which allows for evaluating, for example, variables in the midst of it. The dynamically changing part of the homepage, the number of saved notes (in the code noteCount), is replaced by the current number of notes (in the code notes.length) in the template string. Writing HTML in the midst of the code is of course not smart, but for old-school PHP-programmers it was a normal practice.
In traditional web applications the browser is "dumb". It only fetches HTML data from the server, and all application logic is on the server. A server can be created, for example, using Java Spring like on the University of Helsinki course Web-palvelinohjelmointi, Python Flask (like on the course tietokantasovellus) or with Ruby on Rails. The example uses Express from Node.js. This course will use Node.js and Express to create web servers.
--
#Running Application Logic on the Browser
Running application logic on the browser
Keep the Developer Console open. Empty the console by clicking the 🚫 symbol, or by typing clear() in the console. Now when you go to the notes page, the browser does 4 HTTP requests:
[GAMBAR: https://fullstackopen.com/static/02ed5b206f76e1f9bcf4ad3ffff8a2b4/5a190/8e.png]
All of the requests have different types. The first request's type is document. It is the HTML code of the page, and it looks as follows:
[GAMBAR: https://fullstackopen.com/static/8856aaf0012972e3b7d5b1dfc6aaa3f6/5a190/9e.png]
When we compare the page shown on the browser and the HTML code returned by the server, we notice that the code does not contain the list of codes. The head-section of the HTML contains script-tag, which causes the browser to fetch a JavaScript file called main.js. The JavaScritp code looks as follows:
[var xhttp = new XMLHttpRequest()

xhttp.onreadystatechange = function() {
  if (this.readyState == 4 && this.status == 200) {
    const data = JSON.parse(this.responseText)
    console.log(data)

    var ul = document.createElement('ul')
    ul.setAttribute('class', 'notes')

    data.forEach(function(note) {
      var li = document.createElement('li')

      ul.appendChild(li)
      li.appendChild(document.createTextNode(note.content))
    })

    document.getElementById('notes').appendChild(ul)
  }
}

xhttp.open('GET', '/data.json', true)
xhttp.send()]
The details of the code are not important right now, but some code has been included to spice up the images and the text. We will properly start coding in part 1. The sample code in this part is actually not relevant at all to the coding techniques of this course. 
Some might wonder why xhttp-object is used instead of the modern fetch. This is due to not wanting to go into promises at all yet, and the code having a secondary role in this part. We will return to modern ways to make requests to the server in part 2.
Immediately after fetching the script tag, the browser begins to execute the code. The last two lines define that the browser does an HTTP GET request to the server's address /data.json:
[xhttp.open('GET', '/data.json', true)
xhttp.send()]
This is the bottom-most request shown on the Network tab.
We can try going to the address https://studies.cs.helsinki.fi/exampleapp/data.json straight from the browser:
[GAMBAR: https://fullstackopen.com/static/cb83e4c1c89fd4bc662942457f30403e/5a190/10e.png]
There we find the notes in JSON "raw data". By default, Chromium-based browsers are not too good at displaying JSON data. Plugins can be used to handle the formatting. Install, for example, JSONView on Chrome, and reload the page. The data is now nicely formatted:
[GAMBAR: https://fullstackopen.com/static/fd335c19a19f2176040834b7c5533193/5a190/11e.png]
So, the JavaScript code of the notes page above downloads the JSON-data containing the notes, and forms a bullet-point list from the note contents:
This is done by the following code:
[const data = JSON.parse(this.responseText)
console.log(data)

var ul = document.createElement('ul')
ul.setAttribute('class', 'notes')

data.forEach(function(note) {
  var li = document.createElement('li')

  ul.appendChild(li)
  li.appendChild(document.createTextNode(note.content))
})

document.getElementById('notes').appendChild(ul)]
The code first creates an unordered list with a ul-tag...
[var ul = document.createElement('ul')
ul.setAttribute('class', 'notes')]
...and then adds one li-tag for each note. Only the content field of each note becomes the contents of the li-tag. The timestamps found in the raw data are not used for anything here.
[data.forEach(function(note) {
  var li = document.createElement('li')

  ul.appendChild(li)
  li.appendChild(document.createTextNode(note.content))
})]
Now open the Console-tab on your Developer Console:
[GAMBAR: https://fullstackopen.com/static/7b61ba46a7734400891ed78cf57011cb/5a190/12e.png]
By clicking the little triangle at the beginning of the line, you can expand the text on the console.
[GAMBAR: https://fullstackopen.com/static/b6c827a56505ac8a9243162a448ada21/5a190/13e.png]
This output on the console is caused by the console.log command in the code:
[const data = JSON.parse(this.responseText)
console.log(data)]
So, after receiving data from the server, the code prints it to the console.
The Console tab and the console.log command will become very familiar to you during the course.
--
#Event Handlers and Callback Functions
The structure of this code is a bit odd:
[var xhttp = new XMLHttpRequest()

xhttp.onreadystatechange = function() {
  // code that takes care of the server response
}

xhttp.open('GET', '/data.json', true)
xhttp.send()]
To request to the server is sent on the last line, but the code to handle the response van be foud further up. What's going on?
[xhttp.onreadystatechange = function () {]
ON this line, and event handler for event onreadystatechange is

## Need to continue the Another Section
